{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aazub\\\\Desktop\\\\OpsLyft Project\\\\covid-tracker\\\\covid-tracker_client\\\\src\\\\Global.js\",\n    _s2 = $RefreshSig$();\n\nimport { useRef, useState } from \"react\"; // import React from \"react\";\n\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Global() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [data, setData] = useState(\"Data should show here\");\n  const [active, setActive] = useState([]);\n  const [recovered, setRecover] = useState([]);\n  const [deaths, setDeath] = useState([]);\n  const [graph_data, setGraph] = useState([]);\n\n  function global_data() {\n    _s();\n\n    fetch(\"http://localhost:9000/covid_data/Global\").then(res => res.json()).then(json => {\n      setData(json);\n    }); // console.log(data.Active);\n\n    const [active, setActive] = useState([// 352561230,\n    parseInt(data.Active / 5), parseInt(data.Active / 4), parseInt(data.Active / 3), parseInt(data.Active / 3), parseInt(data.Active / 4)]);\n    const [recovered, setRecover] = useState([// 35233561230,\n    parseInt(data.Recovered + 9000000), parseInt(data.Recovered + 90000000), parseInt(data.Recovered + 90000000 / 3), parseInt(data.Recovered + 90000000 / 1.5), parseInt(data.Recovered + 90000000 / 2.5)]);\n    const [deaths, setDeath] = useState([// 35236451230,\n    parseInt(data.Deaths * 9), parseInt(data.Deaths * 2), parseInt(data.Deaths * 3), parseInt(data.Deaths * 5), parseInt(data.Deaths * 1)]);\n    const [graph_data, setGraph] = useState([{\n      time: '1st January 2020',\n      Active: active[0],\n      Recovered: recovered[0],\n      Deaths: deaths[0]\n    }, {\n      time: '1st June 2020',\n      Active: active[1],\n      Recovered: recovered[1],\n      Deaths: deaths[1]\n    }, {\n      time: '1st January 2021',\n      Active: active[2],\n      Recovered: recovered[2],\n      Deaths: deaths[2]\n    }, {\n      time: '1st June 2021',\n      Active: active[3],\n      Recovered: recovered[3],\n      Deaths: deaths[3]\n    }, {\n      time: '1st January 2022',\n      Active: active[4],\n      Recovered: recovered[4],\n      Deaths: deaths[4]\n    }]);\n  }\n\n  _s(global_data, \"3FxBm4Ss7vwPo5hZrMUWRc+O6JI=\");\n\n  let from = useRef(null);\n  let to = useRef(null);\n\n  function data_calc() {\n    // TODO: change graph based on selected date range\n    // console.log(from.current.value);\n    let fromDate = from.current.value.split(\"-\");\n    let toDate = to.current.value.split(\"-\"); // console.log(active[0], active[1], active[2], active[3], active[4]);\n\n    if (from.current.value === \"\" || to.current.value === \"\") {\n      alert(\"Please enter Dates\");\n    } else if (parseInt(toDate[0]) < parseInt(fromDate[0])) {\n      alert(\"Invalid date range\");\n    } else {\n      let toDateCalc = toDate[1] + 10;\n      let fromDateCalc = fromDate[1] + 10;\n      setActive([Math.abs(parseInt(data.Active / (toDateCalc - 5))), Math.abs(parseInt(data.Active / (fromDateCalc - 2))), Math.abs(parseInt(data.Active / (toDateCalc - 6))), Math.abs(parseInt(data.Active / (fromDateCalc - 1))), Math.abs(parseInt(data.Active / (toDateCalc - 8)))]);\n      setRecover([\"Missing Data\", \"Missing Data\", \"Missing Data\", \"Missing Data\", \"Missing Data\"]);\n      setDeath([Math.abs(parseInt(data.Deaths / (toDateCalc - 8))), Math.abs(parseInt(data.Deaths / (fromDateCalc - 2))), Math.abs(parseInt(data.Deaths / (toDateCalc - 9))), Math.abs(parseInt(data.Deaths / (fromDateCalc - 1))), Math.abs(parseInt(data.Deaths / (toDateCalc - 7)))]);\n      console.log(Math.abs(parseInt(data.Active / (fromDate[1] - 3))));\n      setGraph([{\n        time: '1st January 2020',\n        Active: active[0],\n        Recovered: recovered[0],\n        Deaths: deaths[0]\n      }, {\n        time: '1st June 2020',\n        Active: active[1],\n        Recovered: recovered[1],\n        Deaths: deaths[1]\n      }, {\n        time: '1st January 2021',\n        Active: active[2],\n        Recovered: recovered[2],\n        Deaths: deaths[2]\n      }, {\n        time: '1st June 2021',\n        Active: active[3],\n        Recovered: recovered[3],\n        Deaths: deaths[3]\n      }, {\n        time: '1st January 2022',\n        Active: active[4],\n        Recovered: recovered[4],\n        Deaths: deaths[4]\n      }]);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"nav-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"from\",\n        className: \"text-dark\",\n        children: \"From\\xA0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        id: \"date\",\n        className: \"fromDate\",\n        ref: from,\n        min: \"2020-01-01\",\n        max: \"2022-02-26\",\n        placeholder: \"2020-01-01\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"to\",\n        className: \"text-dark\",\n        children: \"\\xA0\\xA0\\xA0 To\\xA0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        id: \"date\",\n        className: \"toDate\",\n        ref: to,\n        min: \"2020-01-02\",\n        max: \"2022-02-25\",\n        placeholder: \"2022-02-25\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"btn btn-outline-success\",\n        type: \"button\",\n        value: \"Search Global Data\",\n        onClick: () => {\n          global_data();\n          data_calc();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"btn btn-outline-primary\",\n        type: \"button\",\n        value: \"Display All time Data\",\n        onClick: () => {\n          global_data();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Please select the dates to Search for global Data \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 67\n      }, this), \"Press the button again, if graph not updated\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"4%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        width: 1800,\n        height: 450,\n        data: graph_data,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          stroke: \"#eee\",\n          strokeDasharray: \"5 5 5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          type: \"number\",\n          domain: [dataMin => Math.abs(1000 - Math.abs(dataMin)), dataMax => dataMax]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Active\",\n          stroke: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Recovered\",\n          stroke: \"#242936\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Deaths\",\n          stroke: \"#82ca9d\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(Global, \"R4F+8lthbQCYr3lp+rerAZ1GavU=\");\n\n_c = Global;\nexport default Global;\n\nvar _c;\n\n$RefreshReg$(_c, \"Global\");","map":{"version":3,"sources":["C:/Users/aazub/Desktop/OpsLyft Project/covid-tracker/covid-tracker_client/src/Global.js"],"names":["useRef","useState","LineChart","Line","CartesianGrid","XAxis","YAxis","Tooltip","Legend","Global","data","setData","active","setActive","recovered","setRecover","deaths","setDeath","graph_data","setGraph","global_data","fetch","then","res","json","parseInt","Active","Recovered","Deaths","time","from","to","data_calc","fromDate","current","value","split","toDate","alert","toDateCalc","fromDateCalc","Math","abs","console","log","margin","dataMin","dataMax"],"mappings":"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","sourcesContent":["import { useRef, useState } from \"react\";\r\n// import React from \"react\";\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\n\r\nfunction Global() {\r\n    const [data, setData] = useState(\"Data should show here\");\r\n    const [active, setActive] = useState([]);\r\n    const [recovered, setRecover] = useState([]);\r\n    const [deaths, setDeath] = useState([]);\r\n    const [graph_data, setGraph] = useState([]);\r\n\r\n    function global_data() {\r\n        fetch(\"http://localhost:9000/covid_data/Global\")\r\n            .then((res) => res.json())\r\n            .then(json => { setData(json) });\r\n        // console.log(data.Active);\r\n\r\n\r\n        const [active, setActive] = useState([\r\n            // 352561230,\r\n            parseInt((data.Active) / 5),\r\n            parseInt(data.Active / 4),\r\n            parseInt(data.Active / 3),\r\n            parseInt(data.Active / 3),\r\n            parseInt(data.Active / 4)\r\n        ]);\r\n\r\n        const [recovered, setRecover] = useState([\r\n            // 35233561230,\r\n            parseInt(data.Recovered + 9000000),\r\n            parseInt(data.Recovered + 90000000),\r\n            parseInt(data.Recovered + 90000000 / 3),\r\n            parseInt(data.Recovered + 90000000 / 1.5),\r\n            parseInt(data.Recovered + 90000000 / 2.5)\r\n        ]);\r\n        const [deaths, setDeath] = useState([\r\n            // 35236451230,\r\n            parseInt(data.Deaths * 9),\r\n            parseInt(data.Deaths * 2),\r\n            parseInt(data.Deaths * 3),\r\n            parseInt(data.Deaths * 5),\r\n            parseInt(data.Deaths * 1)\r\n        ]);\r\n\r\n        const [graph_data, setGraph] = useState([\r\n            { time: '1st January 2020', Active: active[0], Recovered: recovered[0], Deaths: deaths[0] },\r\n            { time: '1st June 2020', Active: active[1], Recovered: recovered[1], Deaths: deaths[1] },\r\n            { time: '1st January 2021', Active: active[2], Recovered: recovered[2], Deaths: deaths[2] },\r\n            { time: '1st June 2021', Active: active[3], Recovered: recovered[3], Deaths: deaths[3] },\r\n            { time: '1st January 2022', Active: active[4], Recovered: recovered[4], Deaths: deaths[4] }\r\n        ]);\r\n    }\r\n    let from = useRef(null);\r\n    let to = useRef(null);\r\n\r\n    function data_calc() {\r\n        // TODO: change graph based on selected date range\r\n        // console.log(from.current.value);\r\n        let fromDate = from.current.value.split(\"-\");\r\n        let toDate = to.current.value.split(\"-\");\r\n        // console.log(active[0], active[1], active[2], active[3], active[4]);\r\n\r\n        if (from.current.value === \"\" || to.current.value === \"\") {\r\n            alert(\"Please enter Dates\");\r\n        }\r\n        else if (parseInt(toDate[0]) < parseInt(fromDate[0])) {\r\n            alert(\"Invalid date range\");\r\n        }\r\n        else {\r\n            let toDateCalc = toDate[1] + 10;\r\n            let fromDateCalc = fromDate[1] + 10;\r\n            setActive([\r\n                Math.abs(parseInt((data.Active) / (toDateCalc - 5))),\r\n                Math.abs(parseInt((data.Active) / (fromDateCalc - 2))),\r\n                Math.abs(parseInt((data.Active) / (toDateCalc - 6))),\r\n                Math.abs(parseInt((data.Active) / (fromDateCalc - 1))),\r\n                Math.abs(parseInt((data.Active) / (toDateCalc - 8)))\r\n            ]);\r\n\r\n            setRecover([\r\n                \"Missing Data\",\r\n                \"Missing Data\",\r\n                \"Missing Data\",\r\n                \"Missing Data\",\r\n                \"Missing Data\",\r\n            ]);\r\n\r\n            setDeath([\r\n                Math.abs(parseInt((data.Deaths) / (toDateCalc - 8))),\r\n                Math.abs(parseInt((data.Deaths) / (fromDateCalc - 2))),\r\n                Math.abs(parseInt((data.Deaths) / (toDateCalc - 9))),\r\n                Math.abs(parseInt((data.Deaths) / (fromDateCalc - 1))),\r\n                Math.abs(parseInt((data.Deaths) / (toDateCalc - 7)))\r\n            ]);\r\n            console.log(Math.abs(parseInt((data.Active) / (fromDate[1] - 3))));\r\n            setGraph(\r\n                [\r\n                    { time: '1st January 2020', Active: active[0], Recovered: recovered[0], Deaths: deaths[0] },\r\n                    { time: '1st June 2020', Active: active[1], Recovered: recovered[1], Deaths: deaths[1] },\r\n                    { time: '1st January 2021', Active: active[2], Recovered: recovered[2], Deaths: deaths[2] },\r\n                    { time: '1st June 2021', Active: active[3], Recovered: recovered[3], Deaths: deaths[3] },\r\n                    { time: '1st January 2022', Active: active[4], Recovered: recovered[4], Deaths: deaths[4] }\r\n                ]\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <div >\r\n            <form className=\"nav-item\">\r\n                <label for=\"from\" className=\"text-dark\">\r\n                    From&nbsp;\r\n                </label>\r\n\r\n                <input type=\"date\" id=\"date\" className=\"fromDate\" ref={from} min=\"2020-01-01\" max=\"2022-02-26\" placeholder=\"2020-01-01\" />\r\n\r\n                <label for=\"to\" className=\"text-dark\">\r\n                    &nbsp;&nbsp;&nbsp; To&nbsp;\r\n                </label>\r\n\r\n                <input type=\"date\" id=\"date\" className=\"toDate\" ref={to} min=\"2020-01-02\" max=\"2022-02-25\" placeholder=\"2022-02-25\" />\r\n\r\n                <br /><br />\r\n\r\n                <input className=\"btn btn-outline-success\" type=\"button\" value=\"Search Global Data\" onClick={() => { global_data(); data_calc() }} />\r\n\r\n                <input className=\"btn btn-outline-primary\" type=\"button\" value=\"Display All time Data\" onClick={() => { global_data(); }} />\r\n\r\n            </form>\r\n\r\n            <p>\r\n                Please select the dates to Search for global Data <br />\r\n                Press the button again, if graph not updated\r\n            </p>\r\n\r\n            <div style={{ margin: \"4%\", }}>\r\n\r\n                <LineChart width={1800} height={450} data={graph_data} >\r\n                    <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5 5\" />\r\n                    <XAxis dataKey=\"time\" />\r\n                    <YAxis type=\"number\" domain={[dataMin => Math.abs(1000 - Math.abs(dataMin)),\r\n                    dataMax => (dataMax)]} />\r\n                    {/* <YAxis /> */}\r\n\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Line type=\"monotone\" dataKey=\"Active\" stroke=\"#8884d8\" />\r\n                    <Line type=\"monotone\" dataKey=\"Recovered\" stroke=\"#242936\" />\r\n                    <Line type=\"monotone\" dataKey=\"Deaths\" stroke=\"#82ca9d\" />\r\n                </LineChart>\r\n\r\n            </div>\r\n\r\n        </div >);\r\n}\r\n\r\nexport default Global;"]},"metadata":{},"sourceType":"module"}