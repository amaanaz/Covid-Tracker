{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aazub\\\\Desktop\\\\OpsLyft Project\\\\covid-tracker\\\\covid-tracker_client\\\\src\\\\Global.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport React from \"react\";\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Global() {\n  _s();\n\n  let from = /*#__PURE__*/React.createRef();\n  const [data, setData] = useState(\"Data should show here\");\n\n  function global_data() {\n    fetch(\"http://localhost:9000/covid_data/Global\").then(res => res.json()).then(json => {\n      setData(json);\n    });\n  }\n\n  function data_calc() {\n    // TODO: change graph based on selected date range\n    // let to = document.getElementsByClassName(\"toDate\").value;\n    console.log(\"FROM \" + from.current.value);\n    console.log(\"TO \" + to.current.value);\n  }\n\n  const graph_data = [{\n    time: '1st January 2020',\n    Active: parseInt(data.Active / 5),\n    Recovered: data.Recovered + 9000000,\n    Deaths: parseInt(data.Deaths * 9)\n  }, {\n    time: '1st June 2020',\n    Active: parseInt(data.Active / 4),\n    Recovered: data.Recovered + 90000000,\n    Deaths: data.Deaths * 2\n  }, {\n    time: '1st January 2021',\n    Active: parseInt(data.Active / 3),\n    Recovered: data.Recovered + 90000000 / 3,\n    Deaths: data.Deaths * 3\n  }, {\n    time: '1st June 2021',\n    Active: parseInt(data.Active / 3),\n    Recovered: data.Recovered + 90000000 / 1.5,\n    Deaths: data.Deaths * 5\n  }, {\n    time: '1st January 2022',\n    Active: parseInt(data.Active / 4),\n    Recovered: data.Recovered + 90000000 / 2.5,\n    Deaths: data.Deaths * 1\n  }]; // const graph_data = [{ name: 'Page A', uv: 400, pv: 2400, amt: 2400 },\n  // { name: 'Page B', uv: 300 / 5, pv: 1398, amt: 2210 },\n  // { name: 'Page C', uv: 200 / 2.5, pv: 9800, amt: 2290 },\n  // { name: 'Page D', uv: 278 / 1.5, pv: 3908 * 5, amt: 2000 },\n  // { name: 'Page E', uv: 189, pv: 4800, amt: 2181 },\n  // ];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"nav-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"from\",\n        className: \"text-dark\",\n        children: \"From\\xA0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        id: \"date\",\n        className: \"fromDate\",\n        ref: \"from\",\n        min: \"2020-01-01\",\n        max: \"2022-02-26\",\n        value: \"2020-01-01\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"to\",\n        className: \"text-dark\",\n        children: \"\\xA0\\xA0\\xA0 To\\xA0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        id: \"date\",\n        className: \"toDate\",\n        ref: \"to\",\n        min: \"2020-01-02\",\n        max: \"2022-02-25\",\n        value: \"2022-02-25\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"btn btn-outline-success\",\n        type: \"button\",\n        value: \"Search Global Data\",\n        onClick: () => {\n          global_data();\n          data_calc();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"7%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        width: 1800,\n        height: 500,\n        data: graph_data,\n        style: {},\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          stroke: \"#eee\",\n          strokeDasharray: \"5 5 5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          type: \"number\",\n          domain: [dataMin => 0 - Math.abs(dataMin), dataMax => dataMax * 2]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Active\",\n          stroke: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Recovered\",\n          stroke: \"#242936\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Deaths\",\n          stroke: \"#82ca9d\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Global, \"kHn6x5ZlSwi1AykJze/Yc/ZxUWs=\");\n\n_c = Global;\nexport default Global;\n\nvar _c;\n\n$RefreshReg$(_c, \"Global\");","map":{"version":3,"sources":["C:/Users/aazub/Desktop/OpsLyft Project/covid-tracker/covid-tracker_client/src/Global.js"],"names":["useState","React","LineChart","Line","CartesianGrid","XAxis","YAxis","Tooltip","Legend","Global","from","createRef","data","setData","global_data","fetch","then","res","json","data_calc","console","log","current","value","to","graph_data","time","Active","parseInt","Recovered","Deaths","margin","dataMin","Math","abs","dataMax"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport React from \"react\";\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\n\r\nfunction Global() {\r\n\r\n    let from = React.createRef();\r\n\r\n    const [data, setData] = useState(\"Data should show here\");\r\n\r\n    function global_data() {\r\n        fetch(\"http://localhost:9000/covid_data/Global\")\r\n            .then((res) => res.json())\r\n            .then(json => { setData(json) });\r\n    }\r\n\r\n    function data_calc() {\r\n        // TODO: change graph based on selected date range\r\n\r\n        // let to = document.getElementsByClassName(\"toDate\").value;\r\n        console.log(\"FROM \" + from.current.value);\r\n        console.log(\"TO \" + to.current.value);\r\n    }\r\n\r\n    const graph_data = [\r\n        { time: '1st January 2020', Active: parseInt(data.Active / 5), Recovered: data.Recovered + 9000000, Deaths: parseInt(data.Deaths * 9) },\r\n        { time: '1st June 2020', Active: parseInt(data.Active / 4), Recovered: data.Recovered + 90000000, Deaths: data.Deaths * 2 },\r\n        { time: '1st January 2021', Active: parseInt(data.Active / 3), Recovered: data.Recovered + 90000000 / 3, Deaths: data.Deaths * 3 },\r\n        { time: '1st June 2021', Active: parseInt(data.Active / 3), Recovered: data.Recovered + 90000000 / 1.5, Deaths: data.Deaths * 5 },\r\n        { time: '1st January 2022', Active: parseInt(data.Active / 4), Recovered: data.Recovered + 90000000 / 2.5, Deaths: data.Deaths * 1 }\r\n    ];\r\n\r\n    // const graph_data = [{ name: 'Page A', uv: 400, pv: 2400, amt: 2400 },\r\n    // { name: 'Page B', uv: 300 / 5, pv: 1398, amt: 2210 },\r\n    // { name: 'Page C', uv: 200 / 2.5, pv: 9800, amt: 2290 },\r\n    // { name: 'Page D', uv: 278 / 1.5, pv: 3908 * 5, amt: 2000 },\r\n    // { name: 'Page E', uv: 189, pv: 4800, amt: 2181 },\r\n    // ];\r\n\r\n    return (\r\n\r\n        <div >\r\n            <form className=\"nav-item\">\r\n                <label for=\"from\" className=\"text-dark\">\r\n                    From&nbsp;\r\n                </label>\r\n                <input type=\"date\" id=\"date\" className=\"fromDate\" ref=\"from\" min=\"2020-01-01\" max=\"2022-02-26\" value=\"2020-01-01\" />\r\n\r\n                <label for=\"to\" className=\"text-dark\">\r\n                    &nbsp;&nbsp;&nbsp; To&nbsp;\r\n                </label>\r\n                <input type=\"date\" id=\"date\" className=\"toDate\" ref=\"to\" min=\"2020-01-02\" max=\"2022-02-25\" value=\"2022-02-25\" />\r\n\r\n                <br /><br />\r\n\r\n                <input className=\"btn btn-outline-success\" type=\"button\" value=\"Search Global Data\" onClick={() => { global_data(); data_calc() }} />\r\n\r\n            </form>\r\n\r\n            {/* <p>\r\n                Active: {data.Active} <br />\r\n                Recovered: {data.Recovered + 1000} <br />\r\n                Deaths: {data.Deaths} <br />\r\n            </p> */}\r\n\r\n            <div style={{ margin: \"7%\", }}>\r\n\r\n                <LineChart width={1800} height={500} data={graph_data} style={{}}>\r\n                    <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5 5\" />\r\n                    <XAxis dataKey=\"time\" />\r\n                    <YAxis type=\"number\" domain={[dataMin => (0 - Math.abs(dataMin)), dataMax => (dataMax * 2)]} />\r\n\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Line type=\"monotone\" dataKey=\"Active\" stroke=\"#8884d8\" />\r\n                    <Line type=\"monotone\" dataKey=\"Recovered\" stroke=\"#242936\" />\r\n                    <Line type=\"monotone\" dataKey=\"Deaths\" stroke=\"#82ca9d\" />\r\n                </LineChart>\r\n\r\n            </div>\r\n\r\n        </div >);\r\n}\r\n\r\nexport default Global;"]},"metadata":{},"sourceType":"module"}