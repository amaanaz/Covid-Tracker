{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aazub\\\\Desktop\\\\OpsLyft Project\\\\covid-tracker\\\\covid-tracker_client\\\\src\\\\Global.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from \"react\"; // import React from \"react\";\n\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Global() {\n  _s();\n\n  const [data, setData] = useState(\"Data should show here\");\n\n  function global_data() {\n    fetch(\"http://localhost:9000/covid_data/Global\").then(res => res.json()).then(json => {\n      setData(json);\n    });\n    console.log(data.Active);\n  }\n\n  const [active, setActive] = useState([352561230, parseInt(data.Active / 5), parseInt(data.Active / 4), parseInt(data.Active / 3), parseInt(data.Active / 3), parseInt(data.Active / 4)]);\n  const [recovered, setRecover] = useState([35233561230, parseInt(data.Recovered + 9000000), parseInt(data.Recovered + 90000000), parseInt(data.Recovered + 90000000 / 3), parseInt(data.Recovered + 90000000 / 1.5), parseInt(data.Recovered + 90000000 / 2.5)]);\n  const [deaths, setDeath] = useState([35236451230, parseInt(data.Deaths * 9), parseInt(data.Deaths * 2), parseInt(data.Deaths * 3), parseInt(data.Deaths * 5), parseInt(data.Deaths * 1)]);\n  const [graph_data, setGraph] = useState([{\n    time: '1st January 2020',\n    Active: active[0],\n    Recovered: recovered[0],\n    Deaths: deaths[0]\n  }, {\n    time: '1st June 2020',\n    Active: active[1],\n    Recovered: recovered[1],\n    Deaths: deaths[1]\n  }, {\n    time: '1st January 2021',\n    Active: active[2],\n    Recovered: recovered[2],\n    Deaths: deaths[2]\n  }, {\n    time: '1st June 2021',\n    Active: active[3],\n    Recovered: recovered[3],\n    Deaths: deaths[3]\n  }, {\n    time: '1st January 2022',\n    Active: active[4],\n    Recovered: recovered[4],\n    Deaths: deaths[4]\n  }]); // var graph_data = [\n  //     { time: '1st January 2020', Active: active[0], Recovered: recovered[0], Deaths: deaths[0] },\n  //     { time: '1st June 2020', Active: active[1], Recovered: recovered[1], Deaths: deaths[1] },\n  //     { time: '1st January 2021', Active: active[2], Recovered: recovered[2], Deaths: deaths[2] },\n  //     { time: '1st June 2021', Active: active[3], Recovered: recovered[3], Deaths: deaths[3] },\n  //     { time: '1st January 2022', Active: active[4], Recovered: recovered[4], Deaths: deaths[4] }\n  // ];\n\n  let from = useRef(null);\n  let to = useRef(null);\n\n  function data_calc() {\n    // TODO: change graph based on selected date range\n    let fromDate = from.current.value.split(\"-\");\n    let toDate = to.current.value.split(\"-\");\n    console.log(active[0], active[1], active[2], active[3], active[4]);\n\n    if (parseInt(toDate[0]) < parseInt(fromDate[0])) {\n      alert(\"Invalid date range\");\n    } else {\n      setActive([Math.abs(parseInt(data.Active / (toDate[2] - 5))), Math.abs(parseInt(data.Active / (fromDate[2] - 2))), Math.abs(parseInt(data.Active / (toDate[2] - 6))), Math.abs(parseInt(data.Active / (fromDate[2] - 1))), Math.abs(parseInt(data.Active / (toDate[2] - 8)))]);\n      setRecover([Math.abs(parseInt(data.Recovered + 9000000)), Math.abs(parseInt(data.Recovered + 90000000)), Math.abs(parseInt(data.Recovered + 90000000 / 3)), Math.abs(parseInt(data.Recovered + 90000000 / 1.5)), Math.abs(parseInt(data.Recovered + 90000000 / 2.5))]);\n      setDeath([Math.abs(parseInt(data.Deaths * 9)), Math.abs(parseInt(data.Deaths * 2)), Math.abs(parseInt(data.Deaths * 3)), Math.abs(parseInt(data.Deaths * 5)), Math.abs(parseInt(data.Deaths * 1))]);\n      console.log(Math.abs(parseInt(data.Active / (toDate[2] - 5))));\n    } // console.log(\"From: \" + parseInt(fromDate[0]));\n    // console.log(\"To: \" + parseInt(toDate[0]));\n\n  } // const graph_data = [{ name: 'Page A', uv: 400, pv: 2400, amt: 2400 },\n  // { name: 'Page B', uv: 300 / 5, pv: 1398, amt: 2210 },\n  // { name: 'Page C', uv: 200 / 2.5, pv: 9800, amt: 2290 },\n  // { name: 'Page D', uv: 278 / 1.5, pv: 3908 * 5, amt: 2000 },\n  // { name: 'Page E', uv: 189, pv: 4800, amt: 2181 },\n  // ];\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"nav-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"from\",\n        className: \"text-dark\",\n        children: \"From\\xA0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        id: \"date\",\n        className: \"fromDate\",\n        ref: from,\n        min: \"2020-01-01\",\n        max: \"2022-02-26\",\n        placeholder: \"2020-01-01\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"to\",\n        className: \"text-dark\",\n        children: \"\\xA0\\xA0\\xA0 To\\xA0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        id: \"date\",\n        className: \"toDate\",\n        ref: to,\n        min: \"2020-01-02\",\n        max: \"2022-02-25\",\n        placeholder: \"2022-02-25\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"btn btn-outline-success\",\n        type: \"button\",\n        value: \"Search Global Data\",\n        onClick: () => {\n          global_data();\n          data_calc();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"7%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        width: 1800,\n        height: 500,\n        data: graph_data,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          stroke: \"#eee\",\n          strokeDasharray: \"5 5 5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          type: \"number\",\n          domain: [dataMin => 0 - Math.abs(dataMin), dataMax => dataMax * 1.1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Active\",\n          stroke: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Recovered\",\n          stroke: \"#242936\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Deaths\",\n          stroke: \"#82ca9d\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Global, \"84aksD4XokCsw6cPeInP668J5S0=\");\n\n_c = Global;\nexport default Global;\n\nvar _c;\n\n$RefreshReg$(_c, \"Global\");","map":{"version":3,"sources":["C:/Users/aazub/Desktop/OpsLyft Project/covid-tracker/covid-tracker_client/src/Global.js"],"names":["useRef","useState","LineChart","Line","CartesianGrid","XAxis","YAxis","Tooltip","Legend","Global","data","setData","global_data","fetch","then","res","json","console","log","Active","active","setActive","parseInt","recovered","setRecover","Recovered","deaths","setDeath","Deaths","graph_data","setGraph","time","from","to","data_calc","fromDate","current","value","split","toDate","alert","Math","abs","margin","dataMin","dataMax"],"mappings":"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","sourcesContent":["import { useRef, useState } from \"react\";\r\n// import React from \"react\";\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\n\r\nfunction Global() {\r\n    const [data, setData] = useState(\"Data should show here\");\r\n\r\n    function global_data() {\r\n        fetch(\"http://localhost:9000/covid_data/Global\")\r\n            .then((res) => res.json())\r\n            .then(json => { setData(json) });\r\n        console.log(data.Active);\r\n    }\r\n\r\n    const [active, setActive] = useState([\r\n        352561230,\r\n        parseInt((data.Active) / 5),\r\n        parseInt(data.Active / 4),\r\n        parseInt(data.Active / 3),\r\n        parseInt(data.Active / 3),\r\n        parseInt(data.Active / 4)\r\n    ]);\r\n\r\n    const [recovered, setRecover] = useState([\r\n        35233561230,\r\n        parseInt(data.Recovered + 9000000),\r\n        parseInt(data.Recovered + 90000000),\r\n        parseInt(data.Recovered + 90000000 / 3),\r\n        parseInt(data.Recovered + 90000000 / 1.5),\r\n        parseInt(data.Recovered + 90000000 / 2.5)\r\n    ]);\r\n    const [deaths, setDeath] = useState([\r\n        35236451230,\r\n        parseInt(data.Deaths * 9),\r\n        parseInt(data.Deaths * 2),\r\n        parseInt(data.Deaths * 3),\r\n        parseInt(data.Deaths * 5),\r\n        parseInt(data.Deaths * 1)\r\n    ]);\r\n\r\n    const [graph_data, setGraph] = useState([\r\n        { time: '1st January 2020', Active: active[0], Recovered: recovered[0], Deaths: deaths[0] },\r\n        { time: '1st June 2020', Active: active[1], Recovered: recovered[1], Deaths: deaths[1] },\r\n        { time: '1st January 2021', Active: active[2], Recovered: recovered[2], Deaths: deaths[2] },\r\n        { time: '1st June 2021', Active: active[3], Recovered: recovered[3], Deaths: deaths[3] },\r\n        { time: '1st January 2022', Active: active[4], Recovered: recovered[4], Deaths: deaths[4] }\r\n    ]);\r\n\r\n    // var graph_data = [\r\n    //     { time: '1st January 2020', Active: active[0], Recovered: recovered[0], Deaths: deaths[0] },\r\n    //     { time: '1st June 2020', Active: active[1], Recovered: recovered[1], Deaths: deaths[1] },\r\n    //     { time: '1st January 2021', Active: active[2], Recovered: recovered[2], Deaths: deaths[2] },\r\n    //     { time: '1st June 2021', Active: active[3], Recovered: recovered[3], Deaths: deaths[3] },\r\n    //     { time: '1st January 2022', Active: active[4], Recovered: recovered[4], Deaths: deaths[4] }\r\n    // ];\r\n\r\n    let from = useRef(null);\r\n    let to = useRef(null);\r\n\r\n    function data_calc() {\r\n        // TODO: change graph based on selected date range\r\n\r\n        let fromDate = from.current.value.split(\"-\");\r\n        let toDate = to.current.value.split(\"-\");\r\n        console.log(active[0], active[1], active[2], active[3], active[4]);\r\n\r\n        if (parseInt(toDate[0]) < parseInt(fromDate[0])) {\r\n            alert(\"Invalid date range\");\r\n        }\r\n        else {\r\n            setActive([\r\n                Math.abs(parseInt((data.Active) / (toDate[2] - 5))),\r\n                Math.abs(parseInt((data.Active) / (fromDate[2] - 2))),\r\n                Math.abs(parseInt((data.Active) / (toDate[2] - 6))),\r\n                Math.abs(parseInt((data.Active) / (fromDate[2] - 1))),\r\n                Math.abs(parseInt((data.Active) / (toDate[2] - 8)))\r\n            ]);\r\n\r\n            setRecover([\r\n                Math.abs(parseInt(data.Recovered + 9000000)),\r\n                Math.abs(parseInt(data.Recovered + 90000000)),\r\n                Math.abs(parseInt(data.Recovered + 90000000 / 3)),\r\n                Math.abs(parseInt(data.Recovered + 90000000 / 1.5)),\r\n                Math.abs(parseInt(data.Recovered + 90000000 / 2.5))\r\n            ]);\r\n\r\n            setDeath([\r\n                Math.abs(parseInt(data.Deaths * 9)),\r\n                Math.abs(parseInt(data.Deaths * 2)),\r\n                Math.abs(parseInt(data.Deaths * 3)),\r\n                Math.abs(parseInt(data.Deaths * 5)),\r\n                Math.abs(parseInt(data.Deaths * 1))\r\n            ]);\r\n            console.log(Math.abs(parseInt(data.Active / (toDate[2] - 5))));\r\n        }\r\n\r\n\r\n        // console.log(\"From: \" + parseInt(fromDate[0]));\r\n        // console.log(\"To: \" + parseInt(toDate[0]));\r\n    }\r\n\r\n\r\n\r\n    // const graph_data = [{ name: 'Page A', uv: 400, pv: 2400, amt: 2400 },\r\n    // { name: 'Page B', uv: 300 / 5, pv: 1398, amt: 2210 },\r\n    // { name: 'Page C', uv: 200 / 2.5, pv: 9800, amt: 2290 },\r\n    // { name: 'Page D', uv: 278 / 1.5, pv: 3908 * 5, amt: 2000 },\r\n    // { name: 'Page E', uv: 189, pv: 4800, amt: 2181 },\r\n    // ];\r\n\r\n    return (\r\n\r\n        <div >\r\n            <form className=\"nav-item\">\r\n                <label for=\"from\" className=\"text-dark\">\r\n                    From&nbsp;\r\n                </label>\r\n\r\n                <input type=\"date\" id=\"date\" className=\"fromDate\" ref={from} min=\"2020-01-01\" max=\"2022-02-26\" placeholder=\"2020-01-01\" />\r\n\r\n                <label for=\"to\" className=\"text-dark\">\r\n                    &nbsp;&nbsp;&nbsp; To&nbsp;\r\n                </label>\r\n\r\n                <input type=\"date\" id=\"date\" className=\"toDate\" ref={to} min=\"2020-01-02\" max=\"2022-02-25\" placeholder=\"2022-02-25\" />\r\n\r\n                <br /><br />\r\n\r\n                <input className=\"btn btn-outline-success\" type=\"button\" value=\"Search Global Data\" onClick={() => { global_data(); data_calc() }} />\r\n\r\n            </form>\r\n\r\n            {/* <p>\r\n                Active: {data.Active} <br />\r\n                Recovered: {data.Recovered + 1000} <br />\r\n                Deaths: {data.Deaths} <br />\r\n            </p> */}\r\n\r\n            <div style={{ margin: \"7%\", }}>\r\n\r\n                <LineChart width={1800} height={500} data={graph_data} >\r\n                    <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5 5\" />\r\n                    <XAxis dataKey=\"time\" />\r\n                    <YAxis type=\"number\" domain={[dataMin => (0 - Math.abs(dataMin)),\r\n                    dataMax => (dataMax * 1.1)]} />\r\n\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Line type=\"monotone\" dataKey=\"Active\" stroke=\"#8884d8\" />\r\n                    <Line type=\"monotone\" dataKey=\"Recovered\" stroke=\"#242936\" />\r\n                    <Line type=\"monotone\" dataKey=\"Deaths\" stroke=\"#82ca9d\" />\r\n                </LineChart>\r\n\r\n            </div>\r\n\r\n        </div >);\r\n}\r\n\r\nexport default Global;"]},"metadata":{},"sourceType":"module"}